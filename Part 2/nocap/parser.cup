/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, EXP, LPAREN, RPAREN, COMMA, LCBRA, RCBRA, PREFIX, SUFFIX, IF, ELSE;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STRING_LITERAL, ID;

/*  Non terminals */
non terminal            program;
non terminal String    function_list, function_declare, top_function_list,top_function, call_args, function_name, arguments_list, argument, inner_arg_list, function_body, addition, if_statements, prefix_phrase, prefix_elem, inner_func_call, inner_call_argument;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
precedence left LPAREN, COMMA, PLUS, MINUS;
precedence right EXP;

/**
 *  The Grammar Rules
 */

program ::= function_list:e top_function:calls{:
			
			System.out.println("\npublic class Main {");
			System.out.println("\tpublic static void main(String[] args) {");
			System.out.printf("%s\n", calls);
			System.out.println("\t}");
			System.out.printf("%s", e);
			
			System.out.println("}");
			 :}
			 

		

	;


/*  Top function calls  */ 

top_function ::= function_name:fname LPAREN call_args:topargs RPAREN top_function:nextupfunc		{: RESULT = String.format("\t\tSystem.out.println(%s (%s));\n%s", fname, topargs, nextupfunc); :}
				| function_name:fname LPAREN RPAREN	top_function:nextupfunc							{: RESULT = String.format("\t\tSystem.out.println(%s ());\n%s", fname, nextupfunc); :}
				|																					{: RESULT = ""; :}
				;

call_args ::= STRING_LITERAL:s                      												{: RESULT = String.format("\"%s\"", s); :}
            | call_args:s COMMA call_args:next 														{: RESULT = String.format("%s, %s",s,next); :}
            | argument:s LPAREN call_args:args RPAREN     											{: RESULT = String.format("%s(%s)", s,args); :}
			| argument:s LPAREN  RPAREN     														{: RESULT = String.format("%s()", s); :}
            ;

/*-----------------------*/

/* Function declaration*/

function_list ::= function_list:rest function_declare:upcomingfunc RCBRA				{: RESULT = String.format("\t%s\n%s", rest, upcomingfunc); :}
				|																		{: RESULT = ""; :}
				;

	/* function declare is name( arg1, arg2, arg3) { blah blah } */
	/* 					  funame    arglist      LCBRA                */
function_declare ::= function_name:funname LPAREN arguments_list:arglist RPAREN LCBRA function_body:body  	{: RESULT = String.format("\tpublic static String %s(%s) {\n\t\t return %s;\n\t}\n", funname, arglist, body); :}
					| function_name:funname LPAREN RPAREN LCBRA function_body:body  						{: RESULT = String.format("\tpublic static String %s() {\n\t\treturn %s;\n\t}\n", funname, body); :}
                    |                                       			  		   							{: RESULT = ""; :}
                    ;


function_name ::= ID:name																{: RESULT = String.format("%s", name); :}
             		;

/*-----------------------*/



/* The list of arguments*/
arguments_list ::= arguments_list:rest COMMA argument:arg								{: RESULT = String.format("%s,String %s", rest, arg); :}
				|	argument:singlearg													{: RESULT = String.format("String %s", singlearg); :}
            	;

argument ::= ID:s             															{: RESULT = String.format("%s", s); :} 
            ;

/*-----------------------*/

/* The list of arguments for inner function calls */
inner_arg_list ::= inner_arg_list:rest COMMA function_body:arg 							{: RESULT = String.format("%s, %s", rest, arg); :}
				|	function_body:singlearg												{: RESULT = String.format("%s", singlearg); :}
            	;



/* Function body */

function_body ::= addition:addstr														{: RESULT = String.format("%s", addstr); :}
				| prefix_phrase:prefphr                                                 {: RESULT = String.format("%s",prefphr ); :}
				| IF LPAREN prefix_phrase:c RPAREN function_body:e1 ELSE function_body:e2	{: RESULT = String.format("%s ? %s : %s", c, e1, e2); :}
				| argument:s LPAREN inner_arg_list:args RPAREN								{: RESULT = String.format("%s(%s)",s, args); :}
				|                               										{: RESULT = ""; :}
                ;

addition ::= addition:rest PLUS addition:addelem										{: RESULT = String.format("%s + %s", rest, addelem); :}
			| ID:s																		{: RESULT = String.format("%s", s); :}
			| STRING_LITERAL:s             												{: RESULT = String.format("\"%s\"", s); :}
			;

/*    if - else          */ 

if_statements ::= IF LPAREN prefix_phrase:c RPAREN prefix_elem:e1 ELSE prefix_elem:e2		{: RESULT = String.format("%s ? %s : %s", c, e1, e2); :}
				;
			

/* prefix / suffix operation */
prefix_phrase ::= prefix_elem:e1 PREFIX prefix_elem:e2									{: RESULT = String.format("%s.startsWith(%s)", e2, e1); :}
				| prefix_elem:e1 SUFFIX prefix_elem:e2									{: RESULT = String.format("%s.endsWith(%s)", e2, e1); :}
				;

prefix_elem ::= STRING_LITERAL:str														{: RESULT = String.format("\"%s\"", str); :}
			| ID:elem																	{: RESULT = String.format("%s", elem); :}
			;



			
/*-----------------------*/



