/* Simple +/-/* expression language; parser evaluates constant expressions on the fly*/
/**
 *  Package and Import Specifications
 */
import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            SEMI, PLUS, MINUS, EXP, LPAREN, RPAREN, COMMA, LCBRA, RCBRA;
terminal Integer    NUMBER;        // our scanner provides numbers as integers
terminal String     STRING_LITERAL, ID;

/*  Non terminals */
non terminal            program;
non terminal String    function_list, function_declare, function_name, arguments_list, argument, function_body, addition;      // used to store evaluated subexpressions

/**
 *  Precedence Declarations
 */
precedence left PLUS, MINUS;
precedence right EXP;

/**
 *  The Grammar Rules
 */

program ::= function_list:e {:
			System.out.println("import java.lang.Math;\n");
			System.out.println("public class Main {");
			System.out.println("\tpublic static void main(String[] args) {");
			
			System.out.println("\t}");
			System.out.printf("%s", e);
			System.out.println("}");
			 :}
	;

/* Function declaration*/

function_list ::= function_list:rest function_declare:upcomingfunc RCBRA				{: RESULT = String.format("\t%s\n%s", rest, upcomingfunc); :}
				|																		{: RESULT = ""; :}
				;

	/* function declare is name( arg1, arg2, arg3) { blah blah } */
	/* 					  funame    arglist      LCBRA                */
function_declare ::= function_name:funname LPAREN arguments_list:arglist RPAREN LCBRA function_body:body  {: RESULT = String.format("\tpublic static String %s(%s) {\n\t\t%s\n\t}\n", funname, arglist, body); :}
                    |                                       			  		   		{: RESULT = ""; :}
                    ;


function_name ::= ID:name																{: RESULT = String.format("%s", name); :}
             		;

/*-----------------------*/



/* The list of arguments*/
arguments_list ::= arguments_list:rest COMMA argument:arg								{: RESULT = String.format("%s, %s", rest, arg); :}
				|	argument:singlearg													{: RESULT = String.format("%s", singlearg); :}
				|                               										{: RESULT = ""; :}
            	;

argument ::= ID:s             															{: RESULT = String.format("String %s", s); :}  
            ;

/*-----------------------*/


/* Function body */
function_body ::= STRING_LITERAL:s             											{: RESULT = String.format("return \"%s\";", s); :}
				| addition:addstr														{: RESULT = String.format("return %s;", addstr); :}
				|                               										{: RESULT = ""; :}
                ;

addition ::= addition:rest PLUS addition:addelem									{: RESULT = String.format("%s + %s", rest, addelem); :}
			| ID:s																		{: RESULT = String.format("%s", s); :}
			;
			
/*-----------------------*/
